#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Information {
private:
    string name;
    string phoneNumber;

public:
    Information(const string& name, const string& phoneNumber) : name(name), phoneNumber(phoneNumber) {}

    bool Check(const vector<Information>* infoList, const string* namePtr, const string* phoneNumberPtr) {
        for (const auto& info : *infoList) {
            if (info.name == *namePtr && info.phoneNumber == *phoneNumberPtr) {
                return true;
            }
        }
        return false;
    }
    void setName(const string& newName) {
        name = newName;
    }

    void setPhoneNumber(const string& newPhoneNumber) {
        phoneNumber = newPhoneNumber;
    }

    const string& getName() const {
        return name;
    }

    const string& getPhoneNumber() const {
        return phoneNumber;
    }
};

int main() {
    vector<Information> members;
    int choice;

    do {
        cout << "***** SWING 회원 정보 관리 프로그램 *****\n" << endl;
        cout << "1. 회원가입" << endl;
        cout << "2. 로그인" << endl;
        cout << "3. 회원 정보 수정" << endl;
        cout << "4. 종료" << endl << endl;
        cout << "\n번호를 입력하세요: ";
        cin >> choice;


        switch (choice) {
        case 1: {
            cout << "\n***** 회원가입을 진행합니다 *****\n\n";
            string name, phoneNumber; 
            cout << "이름을 입력하세요: ";
            cin >> name; 
            cout << "전화번호를 입력하세요: ";
            cin >> phoneNumber;  

            // 이미 등록된 회원인지 확인
            bool alreadyRegistered = false; 
            for (const auto& member : members) {
                if (member.getName() == name && member.getPhoneNumber() == phoneNumber) { 
                    alreadyRegistered = true; 
                    break;  
                }
            }

            if (alreadyRegistered) { 
                cout << "\n이미 등록된 회원 정보입니다.\n" << endl; 
            }
            else {
                members.push_back(Information(name, phoneNumber)); 
                cout << "\n회원가입이 완료되었습니다.\n" << endl; 
            } 
            break;
        }
        case 2: {
            cout << "\n***** 로그인을 진행합니다 *****\n\n";
            string name, phoneNumber;
            cout << "이름을 입력하세요: ";
            cin >> name;
            cout << "전화번호를 입력하세요: ";
            cin >> phoneNumber;
            Information info("", "");
            if (info.Check(&members, &name, &phoneNumber)) {
                cout << "\n로그인이 완료되었습니다.\n" << endl;
                cout << "\n☆★☆★☆★ SWING " << name << "님을 응원합니다 ☆★☆★☆★\n";
            }
            else {
                cout << "\n회원 정보가 일치하지 않습니다.\n" << endl;
            }
            break;
        }
        case 3: {
            cout << "\n***** 회원 정보 수정을 진행합니다 *****\n\n";
            string name, phoneNumber;
            cout << "현재 회원 정보\n\n";
            cout << "이름 : ";
            cin >> name;
            cout << "전화번호 : ";
            cin >> phoneNumber;
            Information info("", "");  
            if (!info.Check(&members, &name, &phoneNumber)) { 
                cout << "\n회원 정보가 일치하지 않습니다.\n\n";

            }
            bool found = false;
            for (auto& member : members) {
                if (member.Check(&members, &name, &phoneNumber)) {
                    string newName, newPhoneNumber;
                    cout << "\n\n새로운 회원 정보\n\n";
                    cout << "이름 : ";
                    cin >> newName;
                    cout << "전화번호 : ";
                    cin >> newPhoneNumber;
                    bool alreadyRegistered = false; 
                    for (const auto& member : members) { 
                        if (member.getName() == newName && member.getPhoneNumber() == newPhoneNumber) { 
                            alreadyRegistered = true;
                            break;
                        }
                    }
                     
                    if (alreadyRegistered) { 
                        cout << "\n이미 등록된 회원 정보입니다.\n" << endl; 
                        found = true; 
                    }
                    else {
                        member.setName(newName); 
                        member.setPhoneNumber(newPhoneNumber); 
                        cout << "\n회원 정보 수정이 완료되었습니다.\n" << endl; 
                        found = true; 
                        
                    }
                    
                    break; 
                   


                    
                } break;
                
                
            } break;
        }
        case 4: {
            cout << "\n프로그램을 종료합니다." << endl;
            break;
        default:
            cout << "\n정확한 번호를 입력해주세요.\n" << endl;
            break;
        }



              return 0;

        }

    }while (choice != 4);
}

